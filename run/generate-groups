#!/usr/bin/env python3

groups=[
    (2,["a","e","i","o","u"]),
    (1,["g","q","j","z","{","}","v","f","x"]),
    (1,["q","k"]),
    (1,["b","p"]),
    (1,["j","y","q"]),
    (1,["w","x","q"]),
    (1,["h"]),
]

# Group processing
def recurse(words,set,n):
    if n:
        next=[]
        for w in words:
            for s in set:
                next.append("%s%s"%(w,s))
        return recurse(next,set,n-1)
    return words

model={}
for l in groups:
    possible=recurse(l[1],l[1],l[0]-1)
    for s in l[1]:
        if not s in model: model[s]=[]
        model[s].extend(possible)

# C code generation
#print("unordered_map<char,vector<string>> banned;")
print("static void populate_banned(){")
for m in model:
    print("\tbanned['%s']={\"%s\"};"%(m,"\",\"".join(model[m])))
print("}")
